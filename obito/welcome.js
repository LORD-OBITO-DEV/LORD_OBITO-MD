import config from '../config.js';

/**
 * Retourne une salutation adapt√©e selon l'heure
 */
function getGreeting() {
  const hour = new Date().getHours();
  if (hour >= 5 && hour < 12) return 'Bonjour';
  if (hour >= 12 && hour < 18) return 'Bonne apr√®s-midi';
  return 'Bonsoir';
}

/**
 * Retourne un emoji saisonnier selon le mois actuel
 */
function getEmojiByMonth() {
  const month = new Date().getMonth() + 1; // 1-12
  if (month === 12 || month === 1) return '‚ùÑÔ∏è';       // hiver
  if (month >= 2 && month <= 4) return 'üå∏';          // printemps
  if (month >= 5 && month <= 7) return '‚òÄÔ∏è';          // √©t√©
  if (month >= 8 && month <= 10) return 'üçÇ';         // automne
  return 'üåü';                                        // par d√©faut
}

/**
 * D√©tection simple de langue, retourne les textes adapt√©s
 */
function getLanguageGreeting(lang = 'fr') {
  if (lang.startsWith('en')) return {
    welcome: 'Welcome',
    group: 'Group',
    members: 'Members',
    admins: 'Admins',
    date: 'Date',
    bot: 'Bot',
    rulesTitle: 'Group rules',
    welcomeIntro: "We're happy to have you here! Please read the rules below to keep a good atmosphere.",
  };
  // Par d√©faut : fran√ßais
  return {
    welcome: 'Bienvenue',
    group: 'Groupe',
    members: 'Membres',
    admins: 'Admins',
    date: 'Date',
    bot: 'Bot',
    rulesTitle: 'R√®gles du groupe',
    welcomeIntro: "Nous sommes ravis de vous accueillir ! Merci de lire les r√®gles ci-dessous pour une bonne ambiance.",
  };
}

/**
 * File d'attente pour g√©rer les arriv√©es group√©es par groupe
 * Cl√© : groupId
 * Valeur : tableau d'objets { userId, username, lang }
 */
const usersQueue = new Map();

/**
 * Envoi group√© du message de bienvenue
 */
async function sendWelcomeBatch(sock, groupId) {
  const batch = usersQueue.get(groupId);
  if (!batch || batch.length === 0) return;

  // R√©cup√®re les m√©tadonn√©es du groupe
  const metadata = await sock.groupMetadata(groupId);
  const groupName = metadata.subject || 'ce groupe';
  const membersCount = metadata.participants.length;
  const adminsCount = metadata.participants.filter(p => p.admin !== null).length;

  // Limite la longueur des r√®gles pour √©viter un message trop long
  const maxDescLength = 350;
  const groupRulesRaw = metadata.desc || "Aucune r√®gle d√©finie pour ce groupe.";
  const groupRules = groupRulesRaw.length > maxDescLength 
    ? groupRulesRaw.substring(0, maxDescLength) + '...'
    : groupRulesRaw;

  // Pr√©pare les mentions et noms
  const mentions = batch.map(u => u.userId);
  const usernames = batch.map(u => u.username).join(', ');

  // Texte de salutation, emoji saisonnier, textes localis√©s
  const greeting = getGreeting();
  const emoji = getEmojiByMonth();
  const langTexts = getLanguageGreeting(batch[0].lang);

  // Date et heure format√©es dans la langue de l'utilisateur principal
  const dateString = new Date().toLocaleString(batch[0].lang || 'fr-FR', { dateStyle: 'full', timeStyle: 'short' });

  // Message d'intro plus chaleureux
  const welcomeIntro = langTexts.welcomeIntro;

  // Construction du message complet
  const text = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ù¶Ô∏é‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïë ${emoji} *${langTexts.welcome} @${usernames} !*
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ù¶Ô∏é‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ïë üë• *${langTexts.group} :* ${groupName}
‚ïëüë§ *${langTexts.members} :* ${membersCount}
‚ïëüëë *${langTexts.admins} :* ${adminsCount}
‚ïëüóìÔ∏è *${langTexts.date} :* ${dateString}
‚ïë
‚ïë ${welcomeIntro}
‚ïë
‚ïë üìú *${langTexts.rulesTitle} :* 
‚ïë ${groupRules}
‚ïë
‚ïëü§ñ *${langTexts.bot} :* ${config.BOT_NAME || 'LORD_OBITO-MD'}
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
> ‚úûÔ∏é ùë©ùíÄ ‚úûÔ∏é ùë≥ùë∂ùëπùë´ ùë∂ùë©ùë∞ùëªùë∂ ùë´ùë¨ùëΩ ‚úûÔ∏é ùêó üéÆ ùë´ùë¨ùëΩ ùë´ùë®ùëπùë≤ ùëÆùë®ùë¥ùë¨ùëπ ‚öîÔ∏è
  `.trim();

  // Essaie d'obtenir la photo de profil du premier utilisateur
  let profilePicUrl = null;
  try {
    profilePicUrl = await sock.profilePictureUrl(batch[0].userId, 'image');
  } catch {
    profilePicUrl = 'https://i.imgur.com/8Km9tLL.png'; // fallback image
  }

  // Envoie le message avec mentions et image
  await sock.sendMessage(groupId, {
    image: { url: profilePicUrl },
    caption: text,
    mentions,
  });

  // Vide la file d'attente pour ce groupe
  usersQueue.delete(groupId);
}

export default {
  name: 'bienvenue',
  description: 'Message de bienvenue complet avec r√®gles et accueil group√©',
  category: 'groupe',
  async execute(sock, message, args) {
    try {
      const from = message.key.remoteJid;
      const userId = message.key.participant || message.key.remoteJid;
      const username = userId.split('@')[0];

      // D√©tection simple de langue (am√©liorable)
      const userLang = 'fr-FR';

      if (!config.WELCOME_ENABLED) {
        await sock.sendMessage(from, {
          text: 'üö´ La commande bienvenue est d√©sactiv√©e par le propri√©taire.',
        });
        return;
      }

      // Ajoute le nouveau membre √† la file d'attente pour le groupe
      if (!usersQueue.has(from)) usersQueue.set(from, []);
      usersQueue.get(from).push({ userId, username, lang: userLang });

      // Si premier ajout√©, lance un timeout pour grouper les arriv√©es (ex: 10s)
      if (usersQueue.get(from).length === 1) {
        setTimeout(() => sendWelcomeBatch(sock, from), 10000);
      }

    } catch (err) {
      console.error('‚ùå Erreur dans la commande bienvenue :', err);
    }
  }
};

